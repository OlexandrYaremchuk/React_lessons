import React from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { materialDark } from "react-syntax-highlighter/dist/esm/styles/prism";
import s from "../lessonsStyle.module.css";
import sprite from "../../assets/img/icomoon/sprite.svg";

const ProjectTree = () => {
  const codeStyle = materialDark;

  return (
    <div>
      <h1>Структура React проєкту</h1>
      <p>
        React є бібліотекою JavaScript для створення інтерфейсів користувача.
        Він використовує концепцію компонентів, які є самостійними фрагментами
        коду, які можна використовувати повторно в різних частинах програми.
      </p>
      <p>
        Структура проекту важлива, оскільки допомагає зберігати код чистим,
        підтримуваним та зрозумілим. Давайте розглянемо основні складові
        правильної структури проекту в React.
      </p>
      <h3>1. Коренева папка проекту</h3>
      <p>
        Перш за все, у вас повинна бути коренева папка для вашого проекту. Вона
        може мати будь-яку назву, але зазвичай називається ім'ям вашого проекту.
        У цій папці розміщуються всі файли та папки, пов'язані з вашим проектом.
      </p>
      <h3>2. Структура папок</h3>
      <p>
        Рекомендована структура папок в React-проекті виглядає приблизно так:
      </p>
      <SyntaxHighlighter language="javascript" style={codeStyle}>
        {`
my-react-app/
src/
  components/
  pages/
  styles/
  assets/
  utils/
  App.js
  index.js
public/
  index.html
package.json
README.md`}
      </SyntaxHighlighter>
      <h3>3. src - директорія коду</h3>
      <p>У папці src міститься весь ваш код:</p>
      <ul>
        <li>
          <strong>components</strong>: Тут розміщуються ваші реюзабельні
          компоненти. Кожен компонент може бути у власній підпапці, якщо це має
          сенс.
        </li>
        <li>
          <strong>pages</strong>: Ваші сторінки, які використовують компоненти
          для відображення різних віджетів і даних.
        </li>
        <li>
          <strong>styles</strong>: Стилі вашого проекту. Можете використовувати
          CSS, SCSS, або інші підходи до організації стилів.
        </li>
        <li>
          <strong>assets</strong> : Тут можуть бути зображення, шрифти або інші
          ресурси, які використовуються у вашому проекті.
        </li>
        <li>
          <strong>utils</strong>: Допоміжні функції або утиліти, які можна
          використовувати в різних частинах проекту.
        </li>
        <li>
          <strong>App.js</strong>: Головний файл компонента вашого додатку.
        </li>
        <li>
          <strong>index.js</strong>: Файл, який імпортує App і рендерить його в
          DOM.
        </li>
      </ul>
      <h3>4. public - публічні ресурси</h3>
      <p>
        У папці public зазвичай розміщується index.html файл та інші публічні
        ресурси, які не підлягають обробці бандлерами чи компіляторами.
      </p>
      <h3>5. package.json</h3>
      <p>
        Цей файл містить інформацію про ваш проект, залежності, скрипти для
        запуску, тестування та інші налаштування.
      </p>
      <h3>6. README.md</h3>
      <p>
        Цей файл містить опис вашого проекту, інструкції щодо запуску, внесення
        внесків тощо.
      </p>
      <h3>Висновок</h3>
      <p>
        Правильна структура проекту у React допомагає підтримувати проект
        організованим і зрозумілим. Використовуючи ці рекомендації, ви зможете
        зосередитися на розробці і поліпшенні вашого додатку, замість того, щоб
        втрачати час на пошук файлів та компонентів. Важливо використовувати
        логічні імена для файлів та папок, щоб легко розуміти їхню природу і
        призначення.
      </p>
      <p>
        Зокрема, розділення коду на компоненти та сторінки допомагає
        підтримувати чистоту та реюзабельність. Стилі та ресурси, такі як
        зображення, слід організовувати так, щоб вони були легко доступні та
        управляються.
      </p>
      <p>
        Не забувайте також про допоміжні функції або утиліти, які можна винести
        в окрему папку <strong>utils</strong>, щоб зменшити дублювання коду та
        полегшити його розробку.
      </p>
      <p>
        Загальною метою структури проекту є зробити ваш код організованим,
        легким для знаходження та редагування, а також зменшити можливість
        помилок через кращу організацію.
      </p>
      <p>
        Важливо розуміти, що структура проекту може відрізнятися в залежності
        від розміру проекту, стандартів команди та особистих вподобань. Тому,
        експериментуйте та вдосконалюйте свою структуру, щоб знайти найкращий
        підхід для вашого проєкту.
      </p>
      <div className={s.interestBox}>
        <div className={s.interestHeader}>
          <svg className={s.textIcon}>
            <use href={sprite + "#target"}></use>
          </svg>
          <h5 style={{ fontWeight: "900", fontSize: "23px" }}>ЦІКАВО</h5>
        </div>
        <p>
          Запам'ятайте, що правильна структура - це лише початок. Подальше
          покращення коду, тестування, документування та забезпечення якості -
          це ключі до успішної розробки React-додатку.
        </p>
      </div>
    </div>
  );
};

export default ProjectTree;
